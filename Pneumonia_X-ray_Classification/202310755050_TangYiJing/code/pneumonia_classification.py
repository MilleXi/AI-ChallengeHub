# -*- coding: utf-8 -*-
"""pneumonia_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tyd0uMnIKGH8iNStTvxY8zxYNq5IAAxU
"""

import tensorflow as tf
tf.test.gpu_device_name()

!nvidia-smi

# 安装Kaggle库
!pip install -q kaggle

# 上传kaggle.json文件（点击左侧文件夹图标上传）
from google.colab import files
files.upload()  # 选择刚下载的kaggle.json

# 移动密钥到正确位置
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json  # 设置权限

!kaggle datasets list

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

!ls -lh /content/*.zip

#解压zip文件
!unzip -o /content/chest-xray-pneumonia.zip -d /content/data

#检验解压结果
!ls /content/data/chest_xray
!ls /content/data/chest_xray/train

#检验样本数量
import os
print("训练集-肺炎:", len(os.listdir("/content/data/chest_xray/train/PNEUMONIA")))
print("训练集-正常:", len(os.listdir("/content/data/chest_xray/train/NORMAL")))

#数据预处理
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# 设置训练集和验证集的生成器
train_datagen = ImageDataGenerator(
    rescale=1./255,         # 归一化像素值
    shear_range=0.2,        # 随机错切变换
    zoom_range=0.2,         # 随机缩放
    horizontal_flip=True,   # 随机水平翻转
    validation_split=0.2    # 划分20%数据作为验证集
)

# 训练集生成器
train_generator = train_datagen.flow_from_directory(
    '/content/data/chest_xray/train',  # 修改为你的实际路径
    target_size=(150, 150),            # 统一图像尺寸
    batch_size=32,
    class_mode='binary',               # 二分类模式
    subset='training'                  # 指定训练集
)

# 验证集生成器
val_generator = train_datagen.flow_from_directory(
    '/content/data/chest_xray/train',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    subset='validation'                # 指定验证集
)

#构建模型 快速CNN模型
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')  # 二分类输出层
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

#训练模型
history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),  # 自动计算每轮的步数
    epochs=10,                            # 训练轮次
    validation_data=val_generator,
    validation_steps=len(val_generator))

#评估模型
import matplotlib.pyplot as plt

# 绘制准确率曲线
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Performance')
plt.legend()
plt.show()

model.save('/content/pneumonia_model.h5')  # 保存模型
from google.colab import files
files.download('/content/pneumonia_model.h5')

#模型评估与预测
test_datagen = ImageDataGenerator(rescale=1./255)  # 仅归一化

test_generator = test_datagen.flow_from_directory(
    '/content/data/chest_xray/test',  # 测试集路径
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    shuffle=False  # 测试集不需要打乱
)

# 评估模型
test_loss, test_acc = model.evaluate(test_generator)
print(f'测试集准确率: {test_acc:.2%}')

#可视化混淆矩阵
from sklearn.metrics import confusion_matrix
import seaborn as sns
import numpy as np

# 获取测试集真实标签和预测结果
test_generator.reset()  # 重置生成器
y_true = test_generator.classes
y_pred = model.predict(test_generator) > 0.5  # 二分类阈值=0.5

# 绘制混淆矩阵
cm = confusion_matrix(y_true, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['normal', 'pneumonia'],
            yticklabels=['normal', 'pneumonia'])
plt.xlabel('predict label')
plt.ylabel('actual label')
plt.show()

#实际应用 单张x光片预测
from tensorflow.keras.preprocessing import image
import numpy as np

def predict_pneumonia(img_path):
    img = image.load_img(img_path, target_size=(150, 150))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0) / 255.  # 归一化
    pred = model.predict(x)
    return "pneumonia" if pred > 0.5 else "normal"

# 示例使用
print(predict_pneumonia("/content/data/chest_xray/test/PNEUMONIA/person100_bacteria_475.jpeg"))
